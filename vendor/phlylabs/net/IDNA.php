<?php
/*
 * @ https://EasyToYou.eu - IonCube v10 Decoder Online
 * @ PHP 5.6
 * @ Decoder version: 1.0.4
 * @ Release: 02/06/2020
 *
 * @ ZendGuard Decoder PHP 5.6
 */

class phlyLabs_Net_IDNA
{
    private $_punycode_prefix = "xn--";
    private $_invalid_ucs = 2147483648.0;
    private $_max_ucs = 1114111;
    private $_base = 36;
    private $_tmin = 1;
    private $_tmax = 26;
    private $_skew = 38;
    private $_damp = 700;
    private $_initial_bias = 72;
    private $_initial_n = 128;
    private $_sbase = 44032;
    private $_lbase = 4352;
    private $_vbase = 4449;
    private $_tbase = 4519;
    private $_lcount = 19;
    private $_vcount = 21;
    private $_tcount = 28;
    private $_ncount = 588;
    private $_scount = 11172;
    private $_error = false;
    private $_api_encoding = "utf8";
    private $_allow_overlong = false;
    private $_strict_mode = false;
    private $NP = array("map_nothing" => array(173, 847, 6150, 6155, 6156, 6157, 8203, 8204, 8205, 8288, 65024, 65025, 65026, 65027, 65028, 65029, 65030, 65031, 65032, 65033, 65034, 65035, 65036, 65037, 65038, 65039, 65279), "general_prohibited" => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 12290), "prohibit" => array(160, 832, 833, 1757, 1807, 5760, 6158, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8203, 8204, 8205, 8206, 8207, 8232, 8233, 8234, 8235, 8236, 8237, 8238, 8239, 8287, 8298, 8299, 8300, 8301, 8302, 8303, 12288, 65279, 65529, 65530, 65531, 65532, 65533, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 917505, 983038, 983039, 1048574, 1048575, 1114110, 1114111), "prohibit_ranges" => array(array(128, 159), array(8288, 8303), array(119155, 119162), array(57344, 63743), array(983040, 1048573), array(1048576, 1114109), array(64976, 65007), array(55296, 57343), array(12272, 12283), array(917536, 917631)), "replacemaps" => array("65" => array(97), "66" => array(98), "67" => array(99), "68" => array(100), "69" => array(101), "70" => array(102), "71" => array(103), "72" => array(104), "73" => array(105), "74" => array(106), "75" => array(107), "76" => array(108), "77" => array(109), "78" => array(110), "79" => array(111), "80" => array(112), "81" => array(113), "82" => array(114), "83" => array(115), "84" => array(116), "85" => array(117), "86" => array(118), "87" => array(119), "88" => array(120), "89" => array(121), "90" => array(122), "181" => array(956), "192" => array(224), "193" => array(225), "194" => array(226), "195" => array(227), "196" => array(228), "197" => array(229), "198" => array(230), "199" => array(231), "200" => array(232), "201" => array(233), "202" => array(234), "203" => array(235), "204" => array(236), "205" => array(237), "206" => array(238), "207" => array(239), "208" => array(240), "209" => array(241), "210" => array(242), "211" => array(243), "212" => array(244), "213" => array(245), "214" => array(246), "216" => array(248), "217" => array(249), "218" => array(250), "219" => array(251), "220" => array(252), "221" => array(253), "222" => array(254), "223" => array(115, 115), "256" => array(257), "258" => array(259), "260" => array(261), "262" => array(263), "264" => array(265), "266" => array(267), "268" => array(269), "270" => array(271), "272" => array(273), "274" => array(275), "276" => array(277), "278" => array(279), "280" => array(281), "282" => array(283), "284" => array(285), "286" => array(287), "288" => array(289), "290" => array(291), "292" => array(293), "294" => array(295), "296" => array(297), "298" => array(299), "300" => array(301), "302" => array(303), "304" => array(105, 775), "306" => array(307), "308" => array(309), "310" => array(311), "313" => array(314), "315" => array(316), "317" => array(318), "319" => array(320), "321" => array(322), "323" => array(324), "325" => array(326), "327" => array(328), "329" => array(700, 110), "330" => array(331), "332" => array(333), "334" => array(335), "336" => array(337), "338" => array(339), "340" => array(341), "342" => array(343), "344" => array(345), "346" => array(347), "348" => array(349), "350" => array(351), "352" => array(353), "354" => array(355), "356" => array(357), "358" => array(359), "360" => array(361), "362" => array(363), "364" => array(365), "366" => array(367), "368" => array(369), "370" => array(371), "372" => array(373), "374" => array(375), "376" => array(255), "377" => array(378), "379" => array(380), "381" => array(382), "383" => array(115), "385" => array(595), "386" => array(387), "388" => array(389), "390" => array(596), "391" => array(392), "393" => array(598), "394" => array(599), "395" => array(396), "398" => array(477), "399" => array(601), "400" => array(603), "401" => array(402), "403" => array(608), "404" => array(611), "406" => array(617), "407" => array(616), "408" => array(409), "412" => array(623), "413" => array(626), "415" => array(629), "416" => array(417), "418" => array(419), "420" => array(421), "422" => array(640), "423" => array(424), "425" => array(643), "428" => array(429), "430" => array(648), "431" => array(432), "433" => array(650), "434" => array(651), "435" => array(436), "437" => array(438), "439" => array(658), "440" => array(441), "444" => array(445), "452" => array(454), "453" => array(454), "455" => array(457), "456" => array(457), "458" => array(460), "459" => array(460), "461" => array(462), "463" => array(464), "465" => array(466), "467" => array(468), "469" => array(470), "471" => array(472), "473" => array(474), "475" => array(476), "478" => array(479), "480" => array(481), "482" => array(483), "484" => array(485), "486" => array(487), "488" => array(489), "490" => array(491), "492" => array(493), "494" => array(495), "496" => array(106, 780), "497" => array(499), "498" => array(499), "500" => array(501), "502" => array(405), "503" => array(447), "504" => array(505), "506" => array(507), "508" => array(509), "510" => array(511), "512" => array(513), "514" => array(515), "516" => array(517), "518" => array(519), "520" => array(521), "522" => array(523), "524" => array(525), "526" => array(527), "528" => array(529), "530" => array(531), "532" => array(533), "534" => array(535), "536" => array(537), "538" => array(539), "540" => array(541), "542" => array(543), "544" => array(414), "546" => array(547), "548" => array(549), "550" => array(551), "552" => array(553), "554" => array(555), "556" => array(557), "558" => array(559), "560" => array(561), "562" => array(563), "837" => array(953), "890" => array(32, 953), "902" => array(940), "904" => array(941), "905" => array(942), "906" => array(943), "908" => array(972), "910" => array(973), "911" => array(974), "912" => array(953, 776, 769), "913" => array(945), "914" => array(946), "915" => array(947), "916" => array(948), "917" => array(949), "918" => array(950), "919" => array(951), "920" => array(952), "921" => array(953), "922" => array(954), "923" => array(955), "924" => array(956), "925" => array(957), "926" => array(958), "927" => array(959), "928" => array(960), "929" => array(961), "931" => array(963), "932" => array(964), "933" => array(965), "934" => array(966), "935" => array(967), "936" => array(968), "937" => array(969), "938" => array(970), "939" => array(971), "944" => array(965, 776, 769), "962" => array(963), "976" => array(946), "977" => array(952), "978" => array(965), "979" => array(973), "980" => array(971), "981" => array(966), "982" => array(960), "984" => array(985), "986" => array(987), "988" => array(989), "990" => array(991), "992" => array(993), "994" => array(995), "996" => array(997), "998" => array(999), "1000" => array(1001), "1002" => array(1003), "1004" => array(1005), "1006" => array(1007), "1008" => array(954), "1009" => array(961), "1010" => array(963), "1012" => array(952), "1013" => array(949), "1024" => array(1104), "1025" => array(1105), "1026" => array(1106), "1027" => array(1107), "1028" => array(1108), "1029" => array(1109), "1030" => array(1110), "1031" => array(1111), "1032" => array(1112), "1033" => array(1113), "1034" => array(1114), "1035" => array(1115), "1036" => array(1116), "1037" => array(1117), "1038" => array(1118), "1039" => array(1119), "1040" => array(1072), "1041" => array(1073), "1042" => array(1074), "1043" => array(1075), "1044" => array(1076), "1045" => array(1077), "1046" => array(1078), "1047" => array(1079), "1048" => array(1080), "1049" => array(1081), "1050" => array(1082), "1051" => array(1083), "1052" => array(1084), "1053" => array(1085), "1054" => array(1086), "1055" => array(1087), "1056" => array(1088), "1057" => array(1089), "1058" => array(1090), "1059" => array(1091), "1060" => array(1092), "1061" => array(1093), "1062" => array(1094), "1063" => array(1095), "1064" => array(1096), "1065" => array(1097), "1066" => array(1098), "1067" => array(1099), "1068" => array(1100), "1069" => array(1101), "1070" => array(1102), "1071" => array(1103), "1120" => array(1121), "1122" => array(1123), "1124" => array(1125), "1126" => array(1127), "1128" => array(1129), "1130" => array(1131), "1132" => array(1133), "1134" => array(1135), "1136" => array(1137), "1138" => array(1139), "1140" => array(1141), "1142" => array(1143), "1144" => array(1145), "1146" => array(1147), "1148" => array(1149), "1150" => array(1151), "1152" => array(1153), "1162" => array(1163), "1164" => array(1165), "1166" => array(1167), "1168" => array(1169), "1170" => array(1171), "1172" => array(1173), "1174" => array(1175), "1176" => array(1177), "1178" => array(1179), "1180" => array(1181), "1182" => array(1183), "1184" => array(1185), "1186" => array(1187), "1188" => array(1189), "1190" => array(1191), "1192" => array(1193), "1194" => array(1195), "1196" => array(1197), "1198" => array(1199), "1200" => array(1201), "1202" => array(1203), "1204" => array(1205), "1206" => array(1207), "1208" => array(1209), "1210" => array(1211), "1212" => array(1213), "1214" => array(1215), "1217" => array(1218), "1219" => array(1220), "1221" => array(1222), "1223" => array(1224), "1225" => array(1226), "1227" => array(1228), "1229" => array(1230), "1232" => array(1233), "1234" => array(1235), "1236" => array(1237), "1238" => array(1239), "1240" => array(1241), "1242" => array(1243), "1244" => array(1245), "1246" => array(1247), "1248" => array(1249), "1250" => array(1251), "1252" => array(1253), "1254" => array(1255), "1256" => array(1257), "1258" => array(1259), "1260" => array(1261), "1262" => array(1263), "1264" => array(1265), "1266" => array(1267), "1268" => array(1269), "1272" => array(1273), "1280" => array(1281), "1282" => array(1283), "1284" => array(1285), "1286" => array(1287), "1288" => array(1289), "1290" => array(1291), "1292" => array(1293), "1294" => array(1295), "1329" => array(1377), "1330" => array(1378), "1331" => array(1379), "1332" => array(1380), "1333" => array(1381), "1334" => array(1382), "1335" => array(1383), "1336" => array(1384), "1337" => array(1385), "1338" => array(1386), "1339" => array(1387), "1340" => array(1388), "1341" => array(1389), "1342" => array(1390), "1343" => array(1391), "1344" => array(1392), "1345" => array(1393), "1346" => array(1394), "1347" => array(1395), "1348" => array(1396), "1349" => array(1397), "1350" => array(1398), "1351" => array(1399), "1352" => array(1400), "1353" => array(1401), "1354" => array(1402), "1355" => array(1403), "1356" => array(1404), "1357" => array(1405), "1358" => array(1406), "1359" => array(1407), "1360" => array(1408), "1361" => array(1409), "1362" => array(1410), "1363" => array(1411), "1364" => array(1412), "1365" => array(1413), "1366" => array(1414), "1415" => array(1381, 1410), "3635" => array(3661, 3634), "7680" => array(7681), "7682" => array(7683), "7684" => array(7685), "7686" => array(7687), "7688" => array(7689), "7690" => array(7691), "7692" => array(7693), "7694" => array(7695), "7696" => array(7697), "7698" => array(7699), "7700" => array(7701), "7702" => array(7703), "7704" => array(7705), "7706" => array(7707), "7708" => array(7709), "7710" => array(7711), "7712" => array(7713), "7714" => array(7715), "7716" => array(7717), "7718" => array(7719), "7720" => array(7721), "7722" => array(7723), "7724" => array(7725), "7726" => array(7727), "7728" => array(7729), "7730" => array(7731), "7732" => array(7733), "7734" => array(7735), "7736" => array(7737), "7738" => array(7739), "7740" => array(7741), "7742" => array(7743), "7744" => array(7745), "7746" => array(7747), "7748" => array(7749), "7750" => array(7751), "7752" => array(7753), "7754" => array(7755), "7756" => array(7757), "7758" => array(7759), "7760" => array(7761), "7762" => array(7763), "7764" => array(7765), "7766" => array(7767), "7768" => array(7769), "7770" => array(7771), "7772" => array(7773), "7774" => array(7775), "7776" => array(7777), "7778" => array(7779), "7780" => array(7781), "7782" => array(7783), "7784" => array(7785), "7786" => array(7787), "7788" => array(7789), "7790" => array(7791), "7792" => array(7793), "7794" => array(7795), "7796" => array(7797), "7798" => array(7799), "7800" => array(7801), "7802" => array(7803), "7804" => array(7805), "7806" => array(7807), "7808" => array(7809), "7810" => array(7811), "7812" => array(7813), "7814" => array(7815), "7816" => array(7817), "7818" => array(7819), "7820" => array(7821), "7822" => array(7823), "7824" => array(7825), "7826" => array(7827), "7828" => array(7829), "7830" => array(104, 817), "7831" => array(116, 776), "7832" => array(119, 778), "7833" => array(121, 778), "7834" => array(97, 702), "7835" => array(7777), "7840" => array(7841), "7842" => array(7843), "7844" => array(7845), "7846" => array(7847), "7848" => array(7849), "7850" => array(7851), "7852" => array(7853), "7854" => array(7855), "7856" => array(7857), "7858" => array(7859), "7860" => array(7861), "7862" => array(7863), "7864" => array(7865), "7866" => array(7867), "7868" => array(7869), "7870" => array(7871), "7872" => array(7873), "7874" => array(7875), "7876" => array(7877), "7878" => array(7879), "7880" => array(7881), "7882" => array(7883), "7884" => array(7885), "7886" => array(7887), "7888" => array(7889), "7890" => array(7891), "7892" => array(7893), "7894" => array(7895), "7896" => array(7897), "7898" => array(7899), "7900" => array(7901), "7902" => array(7903), "7904" => array(7905), "7906" => array(7907), "7908" => array(7909), "7910" => array(7911), "7912" => array(7913), "7914" => array(7915), "7916" => array(7917), "7918" => array(7919), "7920" => array(7921), "7922" => array(7923), "7924" => array(7925), "7926" => array(7927), "7928" => array(7929), "7944" => array(7936), "7945" => array(7937), "7946" => array(7938), "7947" => array(7939), "7948" => array(7940), "7949" => array(7941), "7950" => array(7942), "7951" => array(7943), "7960" => array(7952), "7961" => array(7953), "7962" => array(7954), "7963" => array(7955), "7964" => array(7956), "7965" => array(7957), "7976" => array(7968), "7977" => array(7969), "7978" => array(7970), "7979" => array(7971), "7980" => array(7972), "7981" => array(7973), "7982" => array(7974), "7983" => array(7975), "7992" => array(7984), "7993" => array(7985), "7994" => array(7986), "7995" => array(7987), "7996" => array(7988), "7997" => array(7989), "7998" => array(7990), "7999" => array(7991), "8008" => array(8000), "8009" => array(8001), "8010" => array(8002), "8011" => array(8003), "8012" => array(8004), "8013" => array(8005), "8016" => array(965, 787), "8018" => array(965, 787, 768), "8020" => array(965, 787, 769), "8022" => array(965, 787, 834), "8025" => array(8017), "8027" => array(8019), "8029" => array(8021), "8031" => array(8023), "8040" => array(8032), "8041" => array(8033), "8042" => array(8034), "8043" => array(8035), "8044" => array(8036), "8045" => array(8037), "8046" => array(8038), "8047" => array(8039), "8064" => array(7936, 953), "8065" => array(7937, 953), "8066" => array(7938, 953), "8067" => array(7939, 953), "8068" => array(7940, 953), "8069" => array(7941, 953), "8070" => array(7942, 953), "8071" => array(7943, 953), "8072" => array(7936, 953), "8073" => array(7937, 953), "8074" => array(7938, 953), "8075" => array(7939, 953), "8076" => array(7940, 953), "8077" => array(7941, 953), "8078" => array(7942, 953), "8079" => array(7943, 953), "8080" => array(7968, 953), "8081" => array(7969, 953), "8082" => array(7970, 953), "8083" => array(7971, 953), "8084" => array(7972, 953), "8085" => array(7973, 953), "8086" => array(7974, 953), "8087" => array(7975, 953), "8088" => array(7968, 953), "8089" => array(7969, 953), "8090" => array(7970, 953), "8091" => array(7971, 953), "8092" => array(7972, 953), "8093" => array(7973, 953), "8094" => array(7974, 953), "8095" => array(7975, 953), "8096" => array(8032, 953), "8097" => array(8033, 953), "8098" => array(8034, 953), "8099" => array(8035, 953), "8100" => array(8036, 953), "8101" => array(8037, 953), "8102" => array(8038, 953), "8103" => array(8039, 953), "8104" => array(8032, 953), "8105" => array(8033, 953), "8106" => array(8034, 953), "8107" => array(8035, 953), "8108" => array(8036, 953), "8109" => array(8037, 953), "8110" => array(8038, 953), "8111" => array(8039, 953), "8114" => array(8048, 953), "8115" => array(945, 953), "8116" => array(940, 953), "8118" => array(945, 834), "8119" => array(945, 834, 953), "8120" => array(8112), "8121" => array(8113), "8122" => array(8048), "8123" => array(8049), "8124" => array(945, 953), "8126" => array(953), "8130" => array(8052, 953), "8131" => array(951, 953), "8132" => array(942, 953), "8134" => array(951, 834), "8135" => array(951, 834, 953), "8136" => array(8050), "8137" => array(8051), "8138" => array(8052), "8139" => array(8053), "8140" => array(951, 953), "8146" => array(953, 776, 768), "8147" => array(953, 776, 769), "8150" => array(953, 834), "8151" => array(953, 776, 834), "8152" => array(8144), "8153" => array(8145), "8154" => array(8054), "8155" => array(8055), "8162" => array(965, 776, 768), "8163" => array(965, 776, 769), "8164" => array(961, 787), "8166" => array(965, 834), "8167" => array(965, 776, 834), "8168" => array(8160), "8169" => array(8161), "8170" => array(8058), "8171" => array(8059), "8172" => array(8165), "8178" => array(8060, 953), "8179" => array(969, 953), "8180" => array(974, 953), "8182" => array(969, 834), "8183" => array(969, 834, 953), "8184" => array(8056), "8185" => array(8057), "8186" => array(8060), "8187" => array(8061), "8188" => array(969, 953), "8360" => array(114, 115), "8450" => array(99), "8451" => array(176, 99), "8455" => array(603), "8457" => array(176, 102), "8459" => array(104), "8460" => array(104), "8461" => array(104), "8464" => array(105), "8465" => array(105), "8466" => array(108), "8469" => array(110), "8470" => array(110, 111), "8473" => array(112), "8474" => array(113), "8475" => array(114), "8476" => array(114), "8477" => array(114), "8480" => array(115, 109), "8481" => array(116, 101, 108), "8482" => array(116, 109), "8484" => array(122), "8486" => array(969), "8488" => array(122), "8490" => array(107), "8491" => array(229), "8492" => array(98), "8493" => array(99), "8496" => array(101), "8497" => array(102), "8499" => array(109), "8510" => array(947), "8511" => array(960), "8517" => array(100), "8544" => array(8560), "8545" => array(8561), "8546" => array(8562), "8547" => array(8563), "8548" => array(8564), "8549" => array(8565), "8550" => array(8566), "8551" => array(8567), "8552" => array(8568), "8553" => array(8569), "8554" => array(8570), "8555" => array(8571), "8556" => array(8572), "8557" => array(8573), "8558" => array(8574), "8559" => array(8575), "9398" => array(9424), "9399" => array(9425), "9400" => array(9426), "9401" => array(9427), "9402" => array(9428), "9403" => array(9429), "9404" => array(9430), "9405" => array(9431), "9406" => array(9432), "9407" => array(9433), "9408" => array(9434), "9409" => array(9435), "9410" => array(9436), "9411" => array(9437), "9412" => array(9438), "9413" => array(9439), "9414" => array(9440), "9415" => array(9441), "9416" => array(9442), "9417" => array(9443), "9418" => array(9444), "9419" => array(9445), "9420" => array(9446), "9421" => array(9447), "9422" => array(9448), "9423" => array(9449), "13169" => array(104, 112, 97), "13171" => array(97, 117), "13173" => array(111, 118), "13184" => array(112, 97), "13185" => array(110, 97), "13186" => array(956, 97), "13187" => array(109, 97), "13188" => array(107, 97), "13189" => array(107, 98), "13190" => array(109, 98), "13191" => array(103, 98), "13194" => array(112, 102), "13195" => array(110, 102), "13196" => array(956, 102), "13200" => array(104, 122), "13201" => array(107, 104, 122), "13202" => array(109, 104, 122), "13203" => array(103, 104, 122), "13204" => array(116, 104, 122), "13225" => array(112, 97), "13226" => array(107, 112, 97), "13227" => array(109, 112, 97), "13228" => array(103, 112, 97), "13236" => array(112, 118), "13237" => array(110, 118), "13238" => array(956, 118), "13239" => array(109, 118), "13240" => array(107, 118), "13241" => array(109, 118), "13242" => array(112, 119), "13243" => array(110, 119), "13244" => array(956, 119), "13245" => array(109, 119), "13246" => array(107, 119), "13247" => array(109, 119), "13248" => array(107, 969), "13249" => array(109, 969), "13251" => array(98, 113), "13254" => array(99, 8725, 107, 103), "13255" => array(99, 111, 46), "13256" => array(100, 98), "13257" => array(103, 121), "13259" => array(104, 112), "13261" => array(107, 107), "13262" => array(107, 109), "13271" => array(112, 104), "13273" => array(112, 112, 109), "13274" => array(112, 114), "13276" => array(115, 118), "13277" => array(119, 98), "64256" => array(102, 102), "64257" => array(102, 105), "64258" => array(102, 108), "64259" => array(102, 102, 105), "64260" => array(102, 102, 108), "64261" => array(115, 116), "64262" => array(115, 116), "64275" => array(1396, 1398), "64276" => array(1396, 1381), "64277" => array(1396, 1387), "64278" => array(1406, 1398), "64279" => array(1396, 1389), "65313" => array(65345), "65314" => array(65346), "65315" => array(65347), "65316" => array(65348), "65317" => array(65349), "65318" => array(65350), "65319" => array(65351), "65320" => array(65352), "65321" => array(65353), "65322" => array(65354), "65323" => array(65355), "65324" => array(65356), "65325" => array(65357), "65326" => array(65358), "65327" => array(65359), "65328" => array(65360), "65329" => array(65361), "65330" => array(65362), "65331" => array(65363), "65332" => array(65364), "65333" => array(65365), "65334" => array(65366), "65335" => array(65367), "65336" => array(65368), "65337" => array(65369), "65338" => array(65370), "66560" => array(66600), "66561" => array(66601), "66562" => array(66602), "66563" => array(66603), "66564" => array(66604), "66565" => array(66605), "66566" => array(66606), "66567" => array(66607), "66568" => array(66608), "66569" => array(66609), "66570" => array(66610), "66571" => array(66611), "66572" => array(66612), "66573" => array(66613), "66574" => array(66614), "66575" => array(66615), "66576" => array(66616), "66577" => array(66617), "66578" => array(66618), "66579" => array(66619), "66580" => array(66620), "66581" => array(66621), "66582" => array(66622), "66583" => array(66623), "66584" => array(66624), "66585" => array(66625), "66586" => array(66626), "66587" => array(66627), "66588" => array(66628), "66589" => array(66629), "66590" => array(66630), "66591" => array(66631), "66592" => array(66632), "66593" => array(66633), "66594" => array(66634), "66595" => array(66635), "66596" => array(66636), "66597" => array(66637), "119808" => array(97), "119809" => array(98), "119810" => array(99), "119811" => array(100), "119812" => array(101), "119813" => array(102), "119814" => array(103), "119815" => array(104), "119816" => array(105), "119817" => array(106), "119818" => array(107), "119819" => array(108), "119820" => array(109), "119821" => array(110), "119822" => array(111), "119823" => array(112), "119824" => array(113), "119825" => array(114), "119826" => array(115), "119827" => array(116), "119828" => array(117), "119829" => array(118), "119830" => array(119), "119831" => array(120), "119832" => array(121), "119833" => array(122), "119860" => array(97), "119861" => array(98), "119862" => array(99), "119863" => array(100), "119864" => array(101), "119865" => array(102), "119866" => array(103), "119867" => array(104), "119868" => array(105), "119869" => array(106), "119870" => array(107), "119871" => array(108), "119872" => array(109), "119873" => array(110), "119874" => array(111), "119875" => array(112), "119876" => array(113), "119877" => array(114), "119878" => array(115), "119879" => array(116), "119880" => array(117), "119881" => array(118), "119882" => array(119), "119883" => array(120), "119884" => array(121), "119885" => array(122), "119912" => array(97), "119913" => array(98), "119914" => array(99), "119915" => array(100), "119916" => array(101), "119917" => array(102), "119918" => array(103), "119919" => array(104), "119920" => array(105), "119921" => array(106), "119922" => array(107), "119923" => array(108), "119924" => array(109), "119925" => array(110), "119926" => array(111), "119927" => array(112), "119928" => array(113), "119929" => array(114), "119930" => array(115), "119931" => array(116), "119932" => array(117), "119933" => array(118), "119934" => array(119), "119935" => array(120), "119936" => array(121), "119937" => array(122), "119964" => array(97), "119966" => array(99), "119967" => array(100), "119970" => array(103), "119973" => array(106), "119974" => array(107), "119977" => array(110), "119978" => array(111), "119979" => array(112), "119980" => array(113), "119982" => array(115), "119983" => array(116), "119984" => array(117), "119985" => array(118), "119986" => array(119), "119987" => array(120), "119988" => array(121), "119989" => array(122), "120016" => array(97), "120017" => array(98), "120018" => array(99), "120019" => array(100), "120020" => array(101), "120021" => array(102), "120022" => array(103), "120023" => array(104), "120024" => array(105), "120025" => array(106), "120026" => array(107), "120027" => array(108), "120028" => array(109), "120029" => array(110), "120030" => array(111), "120031" => array(112), "120032" => array(113), "120033" => array(114), "120034" => array(115), "120035" => array(116), "120036" => array(117), "120037" => array(118), "120038" => array(119), "120039" => array(120), "120040" => array(121), "120041" => array(122), "120068" => array(97), "120069" => array(98), "120071" => array(100), "120072" => array(101), "120073" => array(102), "120074" => array(103), "120077" => array(106), "120078" => array(107), "120079" => array(108), "120080" => array(109), "120081" => array(110), "120082" => array(111), "120083" => array(112), "120084" => array(113), "120086" => array(115), "120087" => array(116), "120088" => array(117), "120089" => array(118), "120090" => array(119), "120091" => array(120), "120092" => array(121), "120120" => array(97), "120121" => array(98), "120123" => array(100), "120124" => array(101), "120125" => array(102), "120126" => array(103), "120128" => array(105), "120129" => array(106), "120130" => array(107), "120131" => array(108), "120132" => array(109), "120134" => array(111), "120138" => array(115), "120139" => array(116), "120140" => array(117), "120141" => array(118), "120142" => array(119), "120143" => array(120), "120144" => array(121), "120172" => array(97), "120173" => array(98), "120174" => array(99), "120175" => array(100), "120176" => array(101), "120177" => array(102), "120178" => array(103), "120179" => array(104), "120180" => array(105), "120181" => array(106), "120182" => array(107), "120183" => array(108), "120184" => array(109), "120185" => array(110), "120186" => array(111), "120187" => array(112), "120188" => array(113), "120189" => array(114), "120190" => array(115), "120191" => array(116), "120192" => array(117), "120193" => array(118), "120194" => array(119), "120195" => array(120), "120196" => array(121), "120197" => array(122), "120224" => array(97), "120225" => array(98), "120226" => array(99), "120227" => array(100), "120228" => array(101), "120229" => array(102), "120230" => array(103), "120231" => array(104), "120232" => array(105), "120233" => array(106), "120234" => array(107), "120235" => array(108), "120236" => array(109), "120237" => array(110), "120238" => array(111), "120239" => array(112), "120240" => array(113), "120241" => array(114), "120242" => array(115), "120243" => array(116), "120244" => array(117), "120245" => array(118), "120246" => array(119), "120247" => array(120), "120248" => array(121), "120249" => array(122), "120276" => array(97), "120277" => array(98), "120278" => array(99), "120279" => array(100), "120280" => array(101), "120281" => array(102), "120282" => array(103), "120283" => array(104), "120284" => array(105), "120285" => array(106), "120286" => array(107), "120287" => array(108), "120288" => array(109), "120289" => array(110), "120290" => array(111), "120291" => array(112), "120292" => array(113), "120293" => array(114), "120294" => array(115), "120295" => array(116), "120296" => array(117), "120297" => array(118), "120298" => array(119), "120299" => array(120), "120300" => array(121), "120301" => array(122), "120328" => array(97), "120329" => array(98), "120330" => array(99), "120331" => array(100), "120332" => array(101), "120333" => array(102), "120334" => array(103), "120335" => array(104), "120336" => array(105), "120337" => array(106), "120338" => array(107), "120339" => array(108), "120340" => array(109), "120341" => array(110), "120342" => array(111), "120343" => array(112), "120344" => array(113), "120345" => array(114), "120346" => array(115), "120347" => array(116), "120348" => array(117), "120349" => array(118), "120350" => array(119), "120351" => array(120), "120352" => array(121), "120353" => array(122), "120380" => array(97), "120381" => array(98), "120382" => array(99), "120383" => array(100), "120384" => array(101), "120385" => array(102), "120386" => array(103), "120387" => array(104), "120388" => array(105), "120389" => array(106), "120390" => array(107), "120391" => array(108), "120392" => array(109), "120393" => array(110), "120394" => array(111), "120395" => array(112), "120396" => array(113), "120397" => array(114), "120398" => array(115), "120399" => array(116), "120400" => array(117), "120401" => array(118), "120402" => array(119), "120403" => array(120), "120404" => array(121), "120405" => array(122), "120432" => array(97), "120433" => array(98), "120434" => array(99), "120435" => array(100), "120436" => array(101), "120437" => array(102), "120438" => array(103), "120439" => array(104), "120440" => array(105), "120441" => array(106), "120442" => array(107), "120443" => array(108), "120444" => array(109), "120445" => array(110), "120446" => array(111), "120447" => array(112), "120448" => array(113), "120449" => array(114), "120450" => array(115), "120451" => array(116), "120452" => array(117), "120453" => array(118), "120454" => array(119), "120455" => array(120), "120456" => array(121), "120457" => array(122), "120488" => array(945), "120489" => array(946), "120490" => array(947), "120491" => array(948), "120492" => array(949), "120493" => array(950), "120494" => array(951), "120495" => array(952), "120496" => array(953), "120497" => array(954), "120498" => array(955), "120499" => array(956), "120500" => array(957), "120501" => array(958), "120502" => array(959), "120503" => array(960), "120504" => array(961), "120505" => array(952), "120506" => array(963), "120507" => array(964), "120508" => array(965), "120509" => array(966), "120510" => array(967), "120511" => array(968), "120512" => array(969), "120531" => array(963), "120546" => array(945), "120547" => array(946), "120548" => array(947), "120549" => array(948), "120550" => array(949), "120551" => array(950), "120552" => array(951), "120553" => array(952), "120554" => array(953), "120555" => array(954), "120556" => array(955), "120557" => array(956), "120558" => array(957), "120559" => array(958), "120560" => array(959), "120561" => array(960), "120562" => array(961), "120563" => array(952), "120564" => array(963), "120565" => array(964), "120566" => array(965), "120567" => array(966), "120568" => array(967), "120569" => array(968), "120570" => array(969), "120589" => array(963), "120604" => array(945), "120605" => array(946), "120606" => array(947), "120607" => array(948), "120608" => array(949), "120609" => array(950), "120610" => array(951), "120611" => array(952), "120612" => array(953), "120613" => array(954), "120614" => array(955), "120615" => array(956), "120616" => array(957), "120617" => array(958), "120618" => array(959), "120619" => array(960), "120620" => array(961), "120621" => array(952), "120622" => array(963), "120623" => array(964), "120624" => array(965), "120625" => array(966), "120626" => array(967), "120627" => array(968), "120628" => array(969), "120647" => array(963), "120662" => array(945), "120663" => array(946), "120664" => array(947), "120665" => array(948), "120666" => array(949), "120667" => array(950), "120668" => array(951), "120669" => array(952), "120670" => array(953), "120671" => array(954), "120672" => array(955), "120673" => array(956), "120674" => array(957), "120675" => array(958), "120676" => array(959), "120677" => array(960), "120678" => array(961), "120679" => array(952), "120680" => array(963), "120681" => array(964), "120682" => array(965), "120683" => array(966), "120684" => array(967), "120685" => array(968), "120686" => array(969), "120705" => array(963), "120720" => array(945), "120721" => array(946), "120722" => array(947), "120723" => array(948), "120724" => array(949), "120725" => array(950), "120726" => array(951), "120727" => array(952), "120728" => array(953), "120729" => array(954), "120730" => array(955), "120731" => array(956), "120732" => array(957), "120733" => array(958), "120734" => array(959), "120735" => array(960), "120736" => array(961), "120737" => array(952), "120738" => array(963), "120739" => array(964), "120740" => array(965), "120741" => array(966), "120742" => array(967), "120743" => array(968), "120744" => array(969), "120763" => array(963), "1017" => array(963), "7468" => array(97), "7469" => array(230), "7470" => array(98), "7472" => array(100), "7473" => array(101), "7474" => array(477), "7475" => array(103), "7476" => array(104), "7477" => array(105), "7478" => array(106), "7479" => array(107), "7480" => array(108), "7481" => array(109), "7482" => array(110), "7484" => array(111), "7485" => array(547), "7486" => array(112), "7487" => array(114), "7488" => array(116), "7489" => array(117), "7490" => array(119), "8507" => array(102, 97, 120), "12880" => array(112, 116, 101), "13004" => array(104, 103), "13006" => array(101, 118), "13007" => array(108, 116, 100), "13178" => array(105, 117), "13278" => array(118, 8725, 109), "13279" => array(97, 8725, 109)), "norm_combcls" => array("820" => 1, "821" => 1, "822" => 1, "823" => 1, "824" => 1, "2364" => 7, "2492" => 7, "2620" => 7, "2748" => 7, "2876" => 7, "3260" => 7, "4151" => 7, "12441" => 8, "12442" => 8, "2381" => 9, "2509" => 9, "2637" => 9, "2765" => 9, "2893" => 9, "3021" => 9, "3149" => 9, "3277" => 9, "3405" => 9, "3530" => 9, "3642" => 9, "3972" => 9, "4153" => 9, "5908" => 9, "5940" => 9, "6098" => 9, "1456" => 10, "1457" => 11, "1458" => 12, "1459" => 13, "1460" => 14, "1461" => 15, "1462" => 16, "1463" => 17, "1464" => 18, "1465" => 19, "1467" => 20, "1468" => 21, "1469" => 22, "1471" => 23, "1473" => 24, "1474" => 25, "64286" => 26, "1611" => 27, "1612" => 28, "1613" => 29, "1614" => 30, "1615" => 31, "1616" => 32, "1617" => 33, "1618" => 34, "1648" => 35, "1809" => 36, "3157" => 84, "3158" => 91, "3640" => 103, "3641" => 103, "3656" => 107, "3657" => 107, "3658" => 107, "3659" => 107, "3768" => 118, "3769" => 118, "3784" => 122, "3785" => 122, "3786" => 122, "3787" => 122, "3953" => 129, "3954" => 130, "3962" => 130, "3963" => 130, "3964" => 130, "3965" => 130, "3968" => 130, "3956" => 132, "801" => 202, "802" => 202, "807" => 202, "808" => 202, "795" => 216, "3897" => 216, "119141" => 216, "119142" => 216, "119150" => 216, "119151" => 216, "119152" => 216, "119153" => 216, "119154" => 216, "12330" => 218, "790" => 220, "791" => 220, "792" => 220, "793" => 220, "796" => 220, "797" => 220, "798" => 220, "799" => 220, "800" => 220, "803" => 220, "804" => 220, "805" => 220, "806" => 220, "809" => 220, "810" => 220, "811" => 220, "812" => 220, "813" => 220, "814" => 220, "815" => 220, "816" => 220, "817" => 220, "818" => 220, "819" => 220, "825" => 220, "826" => 220, "827" => 220, "828" => 220, "839" => 220, "840" => 220, "841" => 220, "845" => 220, "846" => 220, "851" => 220, "852" => 220, "853" => 220, "854" => 220, "1425" => 220, "1430" => 220, "1435" => 220, "1443" => 220, "1444" => 220, "1445" => 220, "1446" => 220, "1447" => 220, "1450" => 220, "1621" => 220, "1622" => 220, "1763" => 220, "1770" => 220, "1773" => 220, "1841" => 220, "1844" => 220, "1847" => 220, "1848" => 220, "1849" => 220, "1851" => 220, "1852" => 220, "1854" => 220, "1858" => 220, "1860" => 220, "1862" => 220, "1864" => 220, "2386" => 220, "3864" => 220, "3865" => 220, "3893" => 220, "3895" => 220, "4038" => 220, "6459" => 220, "8424" => 220, "119163" => 220, "119164" => 220, "119165" => 220, "119166" => 220, "119167" => 220, "119168" => 220, "119169" => 220, "119170" => 220, "119178" => 220, "119179" => 220, "1434" => 222, "1453" => 222, "6441" => 222, "12333" => 222, "12334" => 224, "12335" => 224, "119149" => 226, "1454" => 228, "6313" => 228, "12331" => 228, "768" => 230, "769" => 230, "770" => 230, "771" => 230, "772" => 230, "773" => 230, "774" => 230, "775" => 230, "776" => 230, "777" => 230, "778" => 230, "779" => 230, "780" => 230, "781" => 230, "782" => 230, "783" => 230, "784" => 230, "785" => 230, "786" => 230, "787" => 230, "788" => 230, "829" => 230, "830" => 230, "831" => 230, "832" => 230, "833" => 230, "834" => 230, "835" => 230, "836" => 230, "838" => 230, "842" => 230, "843" => 230, "844" => 230, "848" => 230, "849" => 230, "850" => 230, "855" => 230, "867" => 230, "868" => 230, "869" => 230, "870" => 230, "871" => 230, "872" => 230, "873" => 230, "874" => 230, "875" => 230, "876" => 230, "877" => 230, "878" => 230, "879" => 230, "1155" => 230, "1156" => 230, "1157" => 230, "1158" => 230, "1426" => 230, "1427" => 230, "1428" => 230, "1429" => 230, "1431" => 230, "1432" => 230, "1433" => 230, "1436" => 230, "1437" => 230, "1438" => 230, "1439" => 230, "1440" => 230, "1441" => 230, "1448" => 230, "1449" => 230, "1451" => 230, "1452" => 230, "1455" => 230, "1476" => 230, "1552" => 230, "1553" => 230, "1554" => 230, "1555" => 230, "1556" => 230, "1557" => 230, "1619" => 230, "1620" => 230, "1623" => 230, "1624" => 230, "1750" => 230, "1751" => 230, "1752" => 230, "1753" => 230, "1754" => 230, "1755" => 230, "1756" => 230, "1759" => 230, "1760" => 230, "1761" => 230, "1762" => 230, "1764" => 230, "1767" => 230, "1768" => 230, "1771" => 230, "1772" => 230, "1840" => 230, "1842" => 230, "1843" => 230, "1845" => 230, "1846" => 230, "1850" => 230, "1853" => 230, "1855" => 230, "1856" => 230, "1857" => 230, "1859" => 230, "1861" => 230, "1863" => 230, "1865" => 230, "1866" => 230, "2385" => 230, "2387" => 230, "2388" => 230, "3970" => 230, "3971" => 230, "3974" => 230, "3975" => 230, "5901" => 230, "6458" => 230, "8400" => 230, "8401" => 230, "8404" => 230, "8405" => 230, "8406" => 230, "8407" => 230, "8411" => 230, "8412" => 230, "8417" => 230, "8423" => 230, "8425" => 230, "65056" => 230, "65057" => 230, "65058" => 230, "65059" => 230, "119173" => 230, "119174" => 230, "119175" => 230, "119177" => 230, "119176" => 230, "119210" => 230, "119211" => 230, "119212" => 230, "119213" => 230, "789" => 232, "794" => 232, "12332" => 232, "863" => 233, "866" => 233, "861" => 234, "862" => 234, "864" => 234, "865" => 234, "837" => 240));
    public function __construct($options = false)
    {
        $this->slast = $this->_sbase + $this->_lcount * $this->_vcount * $this->_tcount;
        if (is_array($options)) {
            return $this->set_parameter($options);
        }
        return true;
    }
    public function set_parameter($option, $value = false)
    {
        if (!is_array($option)) {
            $option = array($option => $value);
        }
        foreach ($option as $k => $v) {
            switch ($k) {
                case "encoding":
                    switch ($v) {
                        case "utf8":
                        case "ucs4_string":
                        case "ucs4_array":
                            $this->_api_encoding = $v;
                            break;
                        default:
                            $this->_error("Set Parameter: Unknown parameter " . $v . " for option " . $k);
                            return false;
                    }
                case "overlong":
                    $this->_allow_overlong = $v ? true : false;
                    break;
                case "strict":
                    $this->_strict_mode = $v ? true : false;
                    break;
                default:
                    $this->_error("Set Parameter: Unknown option " . $k);
                    return false;
            }
            break;
        }
        return true;
    }
    public function decode($input, $one_time_encoding = false)
    {
        if ($one_time_encoding) {
            switch ($one_time_encoding) {
                case "utf8":
                case "ucs4_string":
                case "ucs4_array":
                    break;
                default:
                    $this->_error("Unknown encoding " . $one_time_encoding);
                    return false;
            }
        }
        $input = trim($input);
        if (strpos($input, "@")) {
            if ($this->_strict_mode) {
                $this->_error("Only simple domain name parts can be handled in strict mode");
                return false;
            }
            list($email_pref, $input) = explode("@", $input, 2);
            $arr = explode(".", $input);
            foreach ($arr as $k => $v) {
                if (preg_match("!^" . preg_quote($this->_punycode_prefix, "!") . "!", $v)) {
                    $conv = $this->_decode($v);
                    if ($conv) {
                        $arr[$k] = $conv;
                    }
                }
            }
            $input = join(".", $arr);
            $arr = explode(".", $email_pref);
            foreach ($arr as $k => $v) {
                if (preg_match("!^" . preg_quote($this->_punycode_prefix, "!") . "!", $v)) {
                    $conv = $this->_decode($v);
                    if ($conv) {
                        $arr[$k] = $conv;
                    }
                }
            }
            $email_pref = join(".", $arr);
            $return = $email_pref . "@" . $input;
        } else {
            if (preg_match("![:\\./]!", $input)) {
                if ($this->_strict_mode) {
                    $this->_error("Only simple domain name parts can be handled in strict mode");
                    return false;
                }
                $parsed = parse_url($input);
                if (isset($parsed["host"])) {
                    $arr = explode(".", $parsed["host"]);
                    foreach ($arr as $k => $v) {
                        $conv = $this->_decode($v);
                        if ($conv) {
                            $arr[$k] = $conv;
                        }
                    }
                    $parsed["host"] = join(".", $arr);
                    $return = (empty($parsed["scheme"]) ? "" : $parsed["scheme"] . (strtolower($parsed["scheme"]) == "mailto" ? ":" : "://")) . (empty($parsed["user"]) ? "" : $parsed["user"] . (empty($parsed["pass"]) ? "" : ":" . $parsed["pass"]) . "@") . $parsed["host"] . (empty($parsed["port"]) ? "" : ":" . $parsed["port"]) . (empty($parsed["path"]) ? "" : $parsed["path"]) . (empty($parsed["query"]) ? "" : "?" . $parsed["query"]) . (empty($parsed["fragment"]) ? "" : "#" . $parsed["fragment"]);
                } else {
                    $arr = explode(".", $input);
                    foreach ($arr as $k => $v) {
                        $conv = $this->_decode($v);
                        $arr[$k] = $conv ? $conv : $v;
                    }
                    $return = join(".", $arr);
                }
            } else {
                $return = $this->_decode($input);
                if (!$return) {
                    $return = $input;
                }
            }
        }
        switch ($one_time_encoding ? $one_time_encoding : $this->_api_encoding) {
            case "utf8":
                return $return;
            case "ucs4_string":
                return $this->_ucs4_to_ucs4_string($this->_utf8_to_ucs4($return));
            case "ucs4_array":
                return $this->_utf8_to_ucs4($return);
            default:
                $this->_error("Unsupported output format");
                return false;
        }
    }
    public function encode($decoded, $one_time_encoding = false)
    {
        switch ($one_time_encoding ? $one_time_encoding : $this->_api_encoding) {
            case "utf8":
                $decoded = $this->_utf8_to_ucs4($decoded);
                break;
            case "ucs4_string":
                $decoded = $this->_ucs4_string_to_ucs4($decoded);
            case "ucs4_array":
                break;
            default:
                $this->_error("Unsupported input format: " . ($one_time_encoding ? $one_time_encoding : $this->_api_encoding));
                return false;
        }
        if (empty($decoded)) {
            return "";
        }
        $last_begin = 0;
        $output = "";
        foreach ($decoded as $k => $v) {
            switch ($v) {
                case 12290:
                case 65294:
                case 65377:
                    $decoded[$k] = 46;
                case 46:
                case 47:
                case 58:
                case 63:
                case 64:
                    if ($this->_strict_mode) {
                        $this->_error("Neither email addresses nor URLs are allowed in strict mode.");
                        return false;
                    }
                    if ($k) {
                        $encoded = "";
                        $encoded = $this->_encode(array_slice($decoded, $last_begin, $k - $last_begin));
                        if ($encoded) {
                            $output .= $encoded;
                        } else {
                            $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, $k - $last_begin));
                        }
                        $output .= chr($decoded[$k]);
                    }
                    $last_begin = $k + 1;
            }
        }
        if ($last_begin) {
            $inp_len = sizeof($decoded);
            $encoded = "";
            $encoded = $this->_encode(array_slice($decoded, $last_begin, $inp_len - $last_begin));
            if ($encoded) {
                $output .= $encoded;
            } else {
                $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, $inp_len - $last_begin));
            }
            return $output;
        }
        if ($output = $this->_encode($decoded)) {
            return $output;
        }
        return $this->_ucs4_to_utf8($decoded);
    }
    public function get_last_error()
    {
        return $this->_error;
    }
    private function _decode($encoded)
    {
        $decoded = array();
        if (!preg_match("!^" . preg_quote($this->_punycode_prefix, "!") . "!", $encoded)) {
            $this->_error("This is not a punycode string");
            return false;
        }
        $encode_test = preg_replace("!^" . preg_quote($this->_punycode_prefix, "!") . "!", "", $encoded);
        if (!$encode_test) {
            $this->_error("The given encoded string was empty");
            return false;
        }
        $delim_pos = strrpos($encoded, "-");
        if (strlen($this->_punycode_prefix) < $delim_pos) {
            for ($k = strlen($this->_punycode_prefix); $k < $delim_pos; $k++) {
                $decoded[] = ord($encoded[$k]);
            }
        }
        $deco_len = count($decoded);
        $enco_len = strlen($encoded);
        $is_first = true;
        $bias = $this->_initial_bias;
        $idx = 0;
        $char = $this->_initial_n;
        for ($enco_idx = $delim_pos ? $delim_pos + 1 : 0; $enco_idx < $enco_len; $deco_len++) {
            $old_idx = $idx;
            $w = 1;
            $k = $this->_base;
            while (1) {
                $digit = $this->_decode_digit($encoded[$enco_idx++]);
                $idx += $digit * $w;
                $t = $k <= $bias ? $this->_tmin : ($bias + $this->_tmax <= $k ? $this->_tmax : $k - $bias);
                if ($digit < $t) {
                    break;
                }
                $w = (int) ($w * ($this->_base - $t));
                $k += $this->_base;
            }
            $bias = $this->_adapt($idx - $old_idx, $deco_len + 1, $is_first);
            $is_first = false;
            $char += (int) ($idx / ($deco_len + 1));
            $idx %= $deco_len + 1;
            if (0 < $deco_len) {
                for ($i = $deco_len; $idx < $i; $i--) {
                    $decoded[$i] = $decoded[$i - 1];
                }
            }
            $decoded[$idx++] = $char;
        }
        return $this->_ucs4_to_utf8($decoded);
    }
    private function _encode($decoded)
    {
        $extract = strlen($this->_punycode_prefix);
        $check_pref = $this->_utf8_to_ucs4($this->_punycode_prefix);
        $check_deco = array_slice($decoded, 0, $extract);
        if ($check_pref == $check_deco) {
            $this->_error("This is already a punycode string");
            return false;
        }
        $encodable = false;
        foreach ($decoded as $k => $v) {
            if (122 < $v) {
                $encodable = true;
                break;
            }
        }
        if (!$encodable) {
            $this->_error("The given string does not contain encodable chars");
            return false;
        }
        $decoded = $this->_nameprep($decoded);
        if (!$decoded || !is_array($decoded)) {
            return false;
        }
        $deco_len = count($decoded);
        if (!$deco_len) {
            return false;
        }
        $codecount = 0;
        $encoded = "";
        for ($i = 0; $i < $deco_len; $i++) {
            $test = $decoded[$i];
            if (47 < $test && $test < 64 || 64 < $test && $test < 91 || 96 < $test && $test <= 123 || 45 == $test) {
                $encoded .= chr($decoded[$i]);
                $codecount++;
            }
        }
        if ($codecount == $deco_len) {
            return $encoded;
        }
        $encoded = $this->_punycode_prefix . $encoded;
        if ($codecount) {
            $encoded .= "-";
        }
        $is_first = true;
        $cur_code = $this->_initial_n;
        $bias = $this->_initial_bias;
        for ($delta = 0; $codecount < $deco_len; $cur_code++) {
            $i = 0;
            for ($next_code = $this->_max_ucs; $i < $deco_len; $i++) {
                if ($cur_code <= $decoded[$i] && $decoded[$i] <= $next_code) {
                    $next_code = $decoded[$i];
                }
            }
            $delta += ($next_code - $cur_code) * ($codecount + 1);
            $cur_code = $next_code;
            for ($i = 0; $i < $deco_len; $i++) {
                if ($decoded[$i] < $cur_code) {
                    $delta++;
                } else {
                    if ($decoded[$i] == $cur_code) {
                        $q = $delta;
                        $k = $this->_base;
                        while (1) {
                            $t = $k <= $bias ? $this->_tmin : ($bias + $this->_tmax <= $k ? $this->_tmax : $k - $bias);
                            if ($q < $t) {
                                break;
                            }
                            $encoded .= $this->_encode_digit(intval($t + ($q - $t) % ($this->_base - $t)));
                            $q = (int) (($q - $t) / ($this->_base - $t));
                            $k += $this->_base;
                        }
                        $encoded .= $this->_encode_digit($q);
                        $bias = $this->_adapt($delta, $codecount + 1, $is_first);
                        $codecount++;
                        $delta = 0;
                        $is_first = false;
                    }
                }
            }
            $delta++;
        }
        return $encoded;
    }
    private function _adapt($delta, $npoints, $is_first)
    {
        $delta = intval($is_first ? $delta / $this->_damp : $delta / 2);
        $delta += intval($delta / $npoints);
        $k = 0;
        while (($this->_base - $this->_tmin) * $this->_tmax / 2 < $delta) {
            $delta = intval($delta / ($this->_base - $this->_tmin));
            $k += $this->_base;
        }
        return intval($k + ($this->_base - $this->_tmin + 1) * $delta / ($delta + $this->_skew));
    }
    private function _encode_digit($d)
    {
        return chr($d + 22 + 75 * ($d < 26));
    }
    private function _decode_digit($cp)
    {
        $cp = ord($cp);
        return $cp - 48 < 10 ? $cp - 22 : ($cp - 65 < 26 ? $cp - 65 : ($cp - 97 < 26 ? $cp - 97 : $this->_base));
    }
    private function _error($error = "")
    {
        $this->_error = $error;
    }
    private function _nameprep($input)
    {
        $output = array();
        $error = false;
        foreach ($input as $v) {
            if (in_array($v, $this->NP["map_nothing"])) {
                continue;
            }
            if (in_array($v, $this->NP["prohibit"]) || in_array($v, $this->NP["general_prohibited"])) {
                $this->_error("NAMEPREP: Prohibited input U+" . sprintf("%08X", $v));
                return false;
            }
            foreach ($this->NP["prohibit_ranges"] as $range) {
                if ($range[0] <= $v && $v <= $range[1]) {
                    $this->_error("NAMEPREP: Prohibited input U+" . sprintf("%08X", $v));
                    return false;
                }
            }
            if (44032 <= $v && $v <= 55215) {
                foreach ($this->_hangul_decompose($v) as $out) {
                    $output[] = (int) $out;
                }
            } else {
                if (isset($this->NP["replacemaps"][$v])) {
                    foreach ($this->_apply_cannonical_ordering($this->NP["replacemaps"][$v]) as $out) {
                        $output[] = (int) $out;
                    }
                } else {
                    $output[] = (int) $v;
                }
            }
        }
        $output = $this->_hangul_compose($output);
        $last_class = 0;
        $last_starter = 0;
        $out_len = count($output);
        for ($i = 0; $i < $out_len; $i++) {
            $class = $this->_get_combining_class($output[$i]);
            if ((!$last_class || $class < $last_class) && $class) {
                $seq_len = $i - $last_starter;
                $out = $this->_combine(array_slice($output, $last_starter, $seq_len));
                if ($out) {
                    $output[$last_starter] = $out;
                    if (count($out) != $seq_len) {
                        for ($j = $i + 1; $j < $out_len; $j++) {
                            $output[$j - 1] = $output[$j];
                        }
                        unset($output[$out_len]);
                    }
                    $i--;
                    $out_len--;
                    $last_class = $i == $last_starter ? 0 : $this->_get_combining_class($output[$i - 1]);
                    continue;
                }
            }
            if (!$class) {
                $last_starter = $i;
            }
            $last_class = $class;
        }
        return $output;
    }
    private function _hangul_decompose($char)
    {
        $sindex = (int) $char - $this->_sbase;
        if ($sindex < 0 || $this->_scount <= $sindex) {
            return array($char);
        }
        $result = array();
        $result[] = (int) $this->_lbase + $sindex / $this->_ncount;
        $result[] = (int) $this->_vbase + $sindex % $this->_ncount / $this->_tcount;
        $T = intval($this->_tbase + $sindex % $this->_tcount);
        if ($T != $this->_tbase) {
            $result[] = $T;
        }
        return $result;
    }
    private function _hangul_compose($input)
    {
        $inp_len = count($input);
        if (!$inp_len) {
            return array();
        }
        $result = array();
        $last = (int) $input[0];
        $result[] = $last;
        for ($i = 1; $i < $inp_len; $i++) {
            $char = (int) $input[$i];
            $sindex = $last - $this->_sbase;
            $lindex = $last - $this->_lbase;
            $vindex = $char - $this->_vbase;
            $tindex = $char - $this->_tbase;
            if (0 <= $sindex && $sindex < $this->_scount && $sindex % $this->_tcount == 0 && 0 <= $tindex && $tindex <= $this->_tcount) {
                $last += $tindex;
                $result[count($result) - 1] = $last;
                continue;
            }
            if (0 <= $lindex && $lindex < $this->_lcount && 0 <= $vindex && $vindex < $this->_vcount) {
                $last = (int) $this->_sbase + ($lindex * $this->_vcount + $vindex) * $this->_tcount;
                $result[count($result) - 1] = $last;
                continue;
            }
            $last = $char;
            $result[] = $char;
        }
        return $result;
    }
    private function _get_combining_class($char)
    {
        return isset($this->NP["norm_combcls"][$char]) ? $this->NP["norm_combcls"][$char] : 0;
    }
    private function _apply_cannonical_ordering($input)
    {
        $swap = true;
        $size = count($input);
        while ($swap) {
            $swap = false;
            $last = $this->_get_combining_class(intval($input[0]));
            for ($i = 0; $i < $size - 1; $i++) {
                $next = $this->_get_combining_class(intval($input[$i + 1]));
                if ($next != 0 && $next < $last) {
                    for ($j = $i + 1; 0 < $j; $j--) {
                        if ($this->_get_combining_class(intval($input[$j - 1])) <= $next) {
                            break;
                        }
                        $t = intval($input[$j]);
                        $input[$j] = intval($input[$j - 1]);
                        $input[$j - 1] = $t;
                        $swap = true;
                    }
                    $next = $last;
                }
                $last = $next;
            }
        }
        return $input;
    }
    private function _combine($input)
    {
        $inp_len = count($input);
        foreach ($this->NP["replacemaps"] as $np_src => $np_target) {
            if ($np_target[0] != $input[0]) {
                continue;
            }
            if (count($np_target) != $inp_len) {
                continue;
            }
            $hit = false;
            foreach ($input as $k2 => $v2) {
                if ($v2 == $np_target[$k2]) {
                    $hit = true;
                } else {
                    $hit = false;
                    break;
                }
            }
            if ($hit) {
                return $np_src;
            }
        }
        return false;
    }
    private function _utf8_to_ucs4($input)
    {
        $output = array();
        $out_len = 0;
        if (function_exists("mb_strlen")) {
            $inp_len = mb_strlen($input, "8bit");
        } else {
            $inp_len = strlen($input);
        }
        $mode = "next";
        $test = "none";
        for ($k = 0; $k < $inp_len; $k++) {
            $v = ord($input[$k]);
            if ($v < 128) {
                $output[$out_len] = $v;
                $out_len++;
                if ("add" == $mode) {
                    $this->_error("Conversion from UTF-8 to UCS-4 failed: malformed input at byte " . $k);
                    return false;
                }
                continue;
            }
            if ("next" == $mode) {
                $start_byte = $v;
                $mode = "add";
                $test = "range";
                if ($v >> 5 == 6) {
                    $next_byte = 0;
                    $v = $v - 192 << 6;
                } else {
                    if ($v >> 4 == 14) {
                        $next_byte = 1;
                        $v = $v - 224 << 12;
                    } else {
                        if ($v >> 3 == 30) {
                            $next_byte = 2;
                            $v = $v - 240 << 18;
                        } else {
                            if ($v >> 2 == 62) {
                                $next_byte = 3;
                                $v = $v - 248 << 24;
                            } else {
                                if ($v >> 1 == 126) {
                                    $next_byte = 4;
                                    $v = $v - 252 << 30;
                                } else {
                                    $this->_error("This might be UTF-8, but I don't understand it at byte " . $k);
                                    return false;
                                }
                            }
                        }
                    }
                }
                if ("add" == $mode) {
                    $output[$out_len] = (int) $v;
                    $out_len++;
                    continue;
                }
            }
            if ("add" == $mode) {
                if (!$this->_allow_overlong && $test == "range") {
                    $test = "none";
                    if ($v < 160 && $start_byte == 224 || $v < 144 && $start_byte == 240 || 143 < $v && $start_byte == 244) {
                        $this->_error("Bogus UTF-8 character detected (out of legal range) at byte " . $k);
                        return false;
                    }
                }
                if ($v >> 6 == 2) {
                    $v = $v - 128 << $next_byte * 6;
                    $output[$out_len - 1] += $v;
                    $next_byte--;
                    if ($next_byte < 0) {
                        $mode = "next";
                    }
                } else {
                    $this->_error("Conversion from UTF-8 to UCS-4 failed: malformed input at byte " . $k);
                    return false;
                }
            }
        }
        return $output;
    }
    private function _ucs4_to_utf8($input)
    {
        $output = "";
        foreach ($input as $k => $v) {
            if ($v < 128) {
                $output .= chr($v);
            } else {
                if ($v < 1 << 11) {
                    $output .= chr(192 + ($v >> 6)) . chr(128 + ($v & 63));
                } else {
                    if ($v < 1 << 16) {
                        $output .= chr(224 + ($v >> 12)) . chr(128 + ($v >> 6 & 63)) . chr(128 + ($v & 63));
                    } else {
                        if ($v < 1 << 21) {
                            $output .= chr(240 + ($v >> 18)) . chr(128 + ($v >> 12 & 63)) . chr(128 + ($v >> 6 & 63)) . chr(128 + ($v & 63));
                        } else {
                            if (self::$safe_mode) {
                                $output .= self::$safe_char;
                            } else {
                                $this->_error("Conversion from UCS-4 to UTF-8 failed: malformed input at byte " . $k);
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return $output;
    }
    private function _ucs4_to_ucs4_string($input)
    {
        $output = "";
        foreach ($input as $v) {
            $output .= chr($v >> 24 & 255) . chr($v >> 16 & 255) . chr($v >> 8 & 255) . chr($v & 255);
        }
        return $output;
    }
    private function _ucs4_string_to_ucs4($input)
    {
        $output = array();
        $inp_len = strlen($input);
        if ($inp_len % 4) {
            $this->_error("Input UCS4 string is broken");
            return false;
        }
        if (!$inp_len) {
            return $output;
        }
        $i = 0;
        for ($out_len = -1; $i < $inp_len; $i++) {
            if (!($i % 4)) {
                $out_len++;
                $output[$out_len] = 0;
            }
            $output[$out_len] += ord($input[$i]) << 8 * (3 - $i % 4);
        }
        return $output;
    }
}

?>